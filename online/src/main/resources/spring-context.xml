<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:util="http://www.springframework.org/schema/util" 
    xmlns:task="http://www.springframework.org/schema/task" xsi:schemaLocation="
		  http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.1.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd"
	default-lazy-init="true">

	<description>Spring Configuration</description>
	
    <!-- 加载配置属性文件 -->
	<!--context:property-placeholder ignore-unresolvable="true" location="classpath:jeesite.properties" /-->
	
	<!-- 加载应用属性实例，可通过  @Value("#{APP_PROP['jdbc.driver']}") String jdbcDriver 方式引用 -->
    <util:properties id="APP_PROP" location="classpath:jeesite.properties" local-override="true"/>
	
	<!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。  -->
	<context:component-scan base-package="com.thinkgem.jeesite,com.renjie120"  ><!-- base-package 如果多个，用“,”分隔 -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	
	<context:component-scan base-package="com.renjie120"  ><!-- base-package 如果多个，用“,”分隔 -->
	</context:component-scan>
	<context:component-scan base-package="com.renjie120.common.zkconfig" />
	<bean id="testZkService"
		  class="com.thinkgem.jeesite.modules.sys.service.TestZkService">
		<property name="testProp" value="${testname}"/>
	</bean>

	<bean id="zkConfigurer"
		  class="com.renjie120.common.zkconfig.DynamicPropertiesSpringConfigurer">
		<property name="order" value="1" />
		<property name="zkClient" ref="zkClient" />
		<property name="helperFactory" ref="helperFactory" />
		<property name="propertiesKeys">
			<list>
				<value>testPro2</value>
				<value>zkpublisher.properties</value>
			</list>
		</property>
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="location" value="classpath:zkpublisher.properties" />
	</bean>

	<bean id="propertyConfigurer"
		  class="com.renjie120.common.utils.CustomizedPropertyPlaceholderConfigurer"
		  lazy-init="false">
		<property name="order" value="2"/>
		<property name="ignoreUnresolvablePlaceholders" value="true"/>
		<property name="fileEncoding" value="UTF-8"></property>
		<property name="locations">
			<list>
				<value>classpath*:online.properties</value>
				<value>classpath*:jeesite.properties</value>
				<!--  value>classpath*:jeesite.properties</value-->
			</list>
		</property>
	</bean>
	<bean id="zkPropertyChange" class="com.renjie120.common.zkconfig.ZkPropertyChangeListenerImpl">
		<property name="zkClient" value="zkClient"/>
	</bean>

	<bean id="zkSerializer" class="com.renjie120.common.zkconfig.ZkUtils.StringSerializer">
		<constructor-arg value="UTF-8" />
	</bean>

	<bean id="zkClient" class="org.I0Itec.zkclient.ZkClient">
		<constructor-arg index="0" value="127.0.0.1:2181" />
		<constructor-arg index="1" value="100000" />
		<property name="zkSerializer" ref="zkSerializer"></property>
	</bean>

	<bean id="configChangeSubscriber" class="com.renjie120.common.zkconfig.ZkConfigChangeSubscriberImpl">
		<constructor-arg index="0" ref="zkClient"></constructor-arg>
		<constructor-arg index="1" value="/lsq/conf"></constructor-arg>
	</bean>

	<bean id="helperFactory" class="com.renjie120.common.zkconfig.DynamicPropertiesHelperFactory">
		<constructor-arg ref="configChangeSubscriber"></constructor-arg>
	</bean>



    
	<bean id="loggerAspect" class="com.renjie120.common.annotation.log.LoggerAspect" /> 
	
 	<bean id="cacheAspect" class="com.renjie120.common.annotation.cache.CacheAspect" /> 
	
	<aop:config>
		<!-- aop:pointcut id="pt"
			expression="execution(* com.renjie120.common.aspect.*.sayHello(..))" /-->
			
		<aop:pointcut id="loginPointer"
			expression="@annotation(com.renjie120.common.annotation.log.LoggerPoint)" /> 
			
		<aop:aspect id="aspect" ref="loggerAspect">

			<aop:around method="trafficInterface" pointcut-ref="loginPointer" />

		</aop:aspect> 
		 
	</aop:config> 
	
 	<aop:config> 
		
		<aop:pointcut id="cachePointer"
			expression="@annotation(com.renjie120.common.annotation.cache.CachePoint)" />
			 
		
		<aop:aspect id="aspect2" ref="cacheAspect">

			<aop:around method="cache" pointcut-ref="cachePointer" />

		</aop:aspect>
		 
	</aop:config> 
	
	<!-- MyBatis begin -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="typeAliasesPackage" value="com.thinkgem.jeesite,com.renjie120"/>
        <property name="typeAliasesSuperType" value="com.thinkgem.jeesite.common.persistence.BaseEntity"/>
        <property name="mapperLocations" value="classpath:/mappings/**/*.xml"/>
		<property name="configLocation" value="classpath:/mybatis-config.xml"></property>
    </bean>
    
    <!-- 扫描basePackage下所有以@MyBatisDao注解的接口 -->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <property name="basePackage" value="com.thinkgem.jeesite,com.renjie120"/>
        <property name="annotationClass" value="com.thinkgem.jeesite.common.persistence.annotation.MyBatisDao"/>
    </bean>
    
    <!-- 定义事务 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
    <!-- MyBatis end -->
    
	<!-- 配置 JSR303 Bean Validator 定义 -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />

	<!-- 缓存配置 -->
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:${ehcache.configFile}" />
	</bean>
	
	
	<!-- 计划任务配置，用 @Service @Lazy(false)标注类，用@Scheduled(cron = "0 0 2 * * ?")标注方法 -->
    <task:executor id="executor" pool-size="10"/> <task:scheduler id="scheduler" pool-size="10"/>
    <task:annotation-driven scheduler="scheduler" executor="executor" proxy-target-class="true"/>
    
	<!-- 数据源配置, 使用 BoneCP 数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
	    <property name="driverClassName" value="${jdbc.driver}" />
	    
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.pool.init}" />
		<property name="minIdle" value="${jdbc.pool.minIdle}" /> 
		<property name="maxActive" value="${jdbc.pool.maxActive}" />
		
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		
		<property name="validationQuery" value="${jdbc.testSql}" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->
		
		<!-- 配置监控统计拦截的filters -->
	    <property name="filters" value="stat" /> 
	</bean>
	
	<!-- 数据源配置, 使用应用服务器的数据库连接池 
	<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/jeesite" />-->

	<!-- 数据源配置, 不使用连接池 
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>-->
	
</beans>